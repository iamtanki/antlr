//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from PointTag.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class PointTagLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		STRING=1, IF=2, PREADD=3, POSTADD=4, REPLACE=5, PRE=6, POST=7, INFIX=8, 
		LINE=9, WS=10, EQ=11, LB=12, RB=13, LP=14, RP=15, LCB=16, RCB=17, COMMA=18, 
		SEMI=19, STAR=20, QUOT=21, CC=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"STRING", "IF", "PREADD", "POSTADD", "REPLACE", "PRE", "POST", "INFIX", 
		"LINE", "WS", "EQ", "LB", "RB", "LP", "RP", "LCB", "RCB", "COMMA", "SEMI", 
		"STAR", "QUOT", "CC"
	};


	public PointTagLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public PointTagLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, "'if'", "'preadd'", "'postadd'", "'replace'", "'pre'", "'post'", 
		"'infix'", null, null, "'='", "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"','", "';'", "'*'", "'\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "IF", "PREADD", "POSTADD", "REPLACE", "PRE", "POST", "INFIX", 
		"LINE", "WS", "EQ", "LB", "RB", "LP", "RP", "LCB", "RCB", "COMMA", "SEMI", 
		"STAR", "QUOT", "CC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "PointTag.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static PointTagLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x18', '\x87', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\x32', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x35', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x6', '\n', '\x63', '\n', '\n', 
		'\r', '\n', '\xE', '\n', '\x64', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x6', '\x17', '\x84', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\x85', 
		'\x4', '\x33', '\x85', '\x2', '\x18', '\x3', '\x3', '\x5', '\x4', '\a', 
		'\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', '\n', 
		'\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', '\xF', 
		'\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', '\x14', 
		'\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', '\x3', '\x2', '\x4', 
		'\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x4', '\x2', '\v', '\v', '\"', 
		'\"', '\x2', '\x89', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x3', '/', 
		'\x3', '\x2', '\x2', '\x2', '\x5', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\a', ';', '\x3', '\x2', '\x2', '\x2', '\t', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\v', 'J', '\x3', '\x2', '\x2', '\x2', '\r', 'R', '\x3', '\x2', 
		'\x2', '\x2', '\xF', 'V', '\x3', '\x2', '\x2', '\x2', '\x11', '[', '\x3', 
		'\x2', '\x2', '\x2', '\x13', '\x62', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'h', '\x3', '\x2', '\x2', '\x2', '\x17', 'l', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'n', '\x3', '\x2', '\x2', '\x2', '\x1B', 'p', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'r', '\x3', '\x2', '\x2', '\x2', '\x1F', 't', '\x3', '\x2', 
		'\x2', '\x2', '!', 'v', '\x3', '\x2', '\x2', '\x2', '#', 'x', '\x3', '\x2', 
		'\x2', '\x2', '%', 'z', '\x3', '\x2', '\x2', '\x2', '\'', '|', '\x3', 
		'\x2', '\x2', '\x2', ')', '~', '\x3', '\x2', '\x2', '\x2', '+', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '-', '\x83', '\x3', '\x2', '\x2', '\x2', '/', 
		'\x33', '\a', '$', '\x2', '\x2', '\x30', '\x32', '\v', '\x2', '\x2', '\x2', 
		'\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', '$', 
		'\x2', '\x2', '\x37', '\x4', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', 
		'\a', 'k', '\x2', '\x2', '\x39', ':', '\a', 'h', '\x2', '\x2', ':', '\x6', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 'r', '\x2', '\x2', '<', '=', 
		'\a', 't', '\x2', '\x2', '=', '>', '\a', 'g', '\x2', '\x2', '>', '?', 
		'\a', '\x63', '\x2', '\x2', '?', '@', '\a', '\x66', '\x2', '\x2', '@', 
		'\x41', '\a', '\x66', '\x2', '\x2', '\x41', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', 'r', '\x2', '\x2', '\x43', '\x44', '\a', 
		'q', '\x2', '\x2', '\x44', '\x45', '\a', 'u', '\x2', '\x2', '\x45', '\x46', 
		'\a', 'v', '\x2', '\x2', '\x46', 'G', '\a', '\x63', '\x2', '\x2', 'G', 
		'H', '\a', '\x66', '\x2', '\x2', 'H', 'I', '\a', '\x66', '\x2', '\x2', 
		'I', '\n', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\a', 't', '\x2', '\x2', 
		'K', 'L', '\a', 'g', '\x2', '\x2', 'L', 'M', '\a', 'r', '\x2', '\x2', 
		'M', 'N', '\a', 'n', '\x2', '\x2', 'N', 'O', '\a', '\x63', '\x2', '\x2', 
		'O', 'P', '\a', '\x65', '\x2', '\x2', 'P', 'Q', '\a', 'g', '\x2', '\x2', 
		'Q', '\f', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', 'r', '\x2', '\x2', 
		'S', 'T', '\a', 't', '\x2', '\x2', 'T', 'U', '\a', 'g', '\x2', '\x2', 
		'U', '\xE', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', 'r', '\x2', '\x2', 
		'W', 'X', '\a', 'q', '\x2', '\x2', 'X', 'Y', '\a', 'u', '\x2', '\x2', 
		'Y', 'Z', '\a', 'v', '\x2', '\x2', 'Z', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\a', 'k', '\x2', '\x2', '\\', ']', '\a', 'p', '\x2', '\x2', 
		']', '^', '\a', 'h', '\x2', '\x2', '^', '_', '\a', 'k', '\x2', '\x2', 
		'_', '`', '\a', 'z', '\x2', '\x2', '`', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x63', '\t', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', '\x62', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\b', '\n', '\x2', 
		'\x2', 'g', '\x14', '\x3', '\x2', '\x2', '\x2', 'h', 'i', '\t', '\x3', 
		'\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\b', '\v', 
		'\x2', '\x2', 'k', '\x16', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', 
		'?', '\x2', '\x2', 'm', '\x18', '\x3', '\x2', '\x2', '\x2', 'n', 'o', 
		'\a', ']', '\x2', '\x2', 'o', '\x1A', '\x3', '\x2', '\x2', '\x2', 'p', 
		'q', '\a', '_', '\x2', '\x2', 'q', '\x1C', '\x3', '\x2', '\x2', '\x2', 
		'r', 's', '\a', '*', '\x2', '\x2', 's', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		't', 'u', '\a', '+', '\x2', '\x2', 'u', ' ', '\x3', '\x2', '\x2', '\x2', 
		'v', 'w', '\a', '}', '\x2', '\x2', 'w', '\"', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\x7F', '\x2', '\x2', 'y', '$', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\a', '.', '\x2', '\x2', '{', '&', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\a', '=', '\x2', '\x2', '}', '(', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\a', ',', '\x2', '\x2', '\x7F', '*', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x81', '\a', '$', '\x2', '\x2', '\x81', ',', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x84', '\v', '\x2', '\x2', '\x2', '\x83', '\x82', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x85', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', 
		'\x2', '\x2', '\x86', '.', '\x3', '\x2', '\x2', '\x2', '\x6', '\x2', '\x33', 
		'\x64', '\x85', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
