//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from GE_Expr.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class GE_ExprParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, EQ=6, STRING=7, RGB=8, EXID=9, 
		ID=10, NUMBER=11, INT=12, LINE=13, WS=14, CC=15;
	public const int
		RULE_prog = 0, RULE_assign = 1, RULE_expr = 2, RULE_id = 3, RULE_number = 4, 
		RULE_parenthesis = 5, RULE_exprList = 6, RULE_text = 7;
	public static readonly string[] ruleNames = {
		"prog", "assign", "expr", "id", "number", "parenthesis", "exprList", "text"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'('", "')'", "'['", "']'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "EQ", "STRING", "RGB", "EXID", "ID", 
		"NUMBER", "INT", "LINE", "WS", "CC"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GE_Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GE_ExprParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GE_ExprParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GE_ExprParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ProgContext : ParserRuleContext {
		public AssignContext[] assign() {
			return GetRuleContexts<AssignContext>();
		}
		public AssignContext assign(int i) {
			return GetRuleContext<AssignContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 16; assign();
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==EXID || _la==ID );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(GE_ExprParser.EQ, 0); }
		public ITerminalNode LINE() { return GetToken(GE_ExprParser.LINE, 0); }
		public ITerminalNode[] WS() { return GetTokens(GE_ExprParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(GE_ExprParser.WS, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 2, RULE_assign);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; id();
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 22; Match(WS);
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28; Match(EQ);
			State = 32;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 29; Match(WS);
					}
					} 
				}
				State = 34;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 35; expr();
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0 || _la==WS) {
					{
					{
					State = 39;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 36; Match(WS);
						}
						}
						State = 41;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 42; Match(T__0);
					State = 46;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 43; Match(WS);
							}
							} 
						}
						State = 48;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
					}
					State = 49; expr();
					}
					}
					State = 54;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 57; Match(LINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallContext : ExprContext {
		public ITerminalNode EXID() { return GetToken(GE_ExprParser.EXID, 0); }
		public ITerminalNode[] WS() { return GetTokens(GE_ExprParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(GE_ExprParser.WS, i);
		}
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}
	public partial class EmptyContext : ExprContext {
		public EmptyContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterEmpty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitEmpty(this);
		}
	}
	public partial class WenbenContext : ExprContext {
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public WenbenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterWenben(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitWenben(this);
		}
	}
	public partial class NumContext : ExprContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public NumContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(GE_ExprParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
	}
	public partial class RgbContext : ExprContext {
		public ITerminalNode RGB() { return GetToken(GE_ExprParser.RGB, 0); }
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public RgbContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterRgb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitRgb(this);
		}
	}
	public partial class ParenContext : ExprContext {
		public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		public ParenContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitParen(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 4, RULE_expr);
		int _la;
		try {
			int _alt;
			State = 86;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				_localctx = new CallContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 59; Match(EXID);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 60; Match(WS);
					}
					}
					State = 65;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 66; Match(T__1);
				State = 68;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
				case 1:
					{
					State = 67; exprList();
					}
					break;
				}
				State = 70; Match(T__2);
				}
				break;
			case 2:
				_localctx = new RgbContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 71; Match(RGB);
				State = 72; Match(T__3);
				State = 74;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 73; exprList();
					}
					break;
				}
				State = 76; Match(T__4);
				}
				break;
			case 3:
				_localctx = new ParenContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 77; parenthesis();
				}
				break;
			case 4:
				_localctx = new NumContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 78; number();
				}
				break;
			case 5:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 79; Match(STRING);
				}
				break;
			case 6:
				_localctx = new WenbenContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 81;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 80; text();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 83;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 7:
				_localctx = new EmptyContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
	 
		public IdContext() { }
		public virtual void CopyFrom(IdContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentyContext : IdContext {
		public ITerminalNode ID() { return GetToken(GE_ExprParser.ID, 0); }
		public IdentyContext(IdContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterIdenty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitIdenty(this);
		}
	}
	public partial class ExidContext : IdContext {
		public ITerminalNode EXID() { return GetToken(GE_ExprParser.EXID, 0); }
		public ExidContext(IdContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterExid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitExid(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 6, RULE_id);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				_localctx = new IdentyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; Match(ID);
				}
				break;
			case EXID:
				_localctx = new ExidContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; Match(EXID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(GE_ExprParser.NUMBER, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 8, RULE_number);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		public ITerminalNode[] WS() { return GetTokens(GE_ExprParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(GE_ExprParser.WS, i);
		}
		public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 10, RULE_parenthesis);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 94; Match(WS);
				}
				}
				State = 99;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 100; Match(T__1);
			State = 104;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 101; Match(WS);
					}
					} 
				}
				State = 106;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 107; exprList();
				}
				break;
			}
			State = 113;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS) {
				{
				{
				State = 110; Match(WS);
				}
				}
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 116; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(GE_ExprParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(GE_ExprParser.WS, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 12, RULE_exprList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; expr();
			State = 135;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 119; Match(WS);
						}
						}
						State = 124;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 125; Match(T__0);
					State = 129;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 126; Match(WS);
							}
							} 
						}
						State = 131;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
					}
					State = 132; expr();
					}
					} 
				}
				State = 137;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode[] CC() { return GetTokens(GE_ExprParser.CC); }
		public ITerminalNode CC(int i) {
			return GetToken(GE_ExprParser.CC, i);
		}
		public ITerminalNode[] LINE() { return GetTokens(GE_ExprParser.LINE); }
		public ITerminalNode LINE(int i) {
			return GetToken(GE_ExprParser.LINE, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGE_ExprListener typedListener = listener as IGE_ExprListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 14, RULE_text);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 140;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
					case 1:
						{
						State = 138;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (_la==T__0 || _la==LINE) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 2:
						{
						State = 139; Match(CC);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 142;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x11', '\x93', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x6', '\x2', '\x14', '\n', '\x2', 
		'\r', '\x2', '\xE', '\x2', '\x15', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'\x1A', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1D', '\v', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '!', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '$', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '(', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '+', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '/', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x32', '\v', '\x3', '\x3', '\x3', '\a', '\x3', '\x35', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', '\x38', '\v', '\x3', '\x5', '\x3', ':', '\n', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '@', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x43', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', 'G', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'M', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x6', '\x4', 
		'T', '\n', '\x4', '\r', '\x4', '\xE', '\x4', 'U', '\x3', '\x4', '\x5', 
		'\x4', 'Y', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', ']', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\a', '\a', '\x62', 
		'\n', '\a', '\f', '\a', '\xE', '\a', '\x65', '\v', '\a', '\x3', '\a', 
		'\x3', '\a', '\a', '\a', 'i', '\n', '\a', '\f', '\a', '\xE', '\a', 'l', 
		'\v', '\a', '\x3', '\a', '\x5', '\a', 'o', '\n', '\a', '\x3', '\a', '\a', 
		'\a', 'r', '\n', '\a', '\f', '\a', '\xE', '\a', 'u', '\v', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\a', '\b', '{', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '~', '\v', '\b', '\x3', '\b', '\x3', '\b', '\a', 
		'\b', '\x82', '\n', '\b', '\f', '\b', '\xE', '\b', '\x85', '\v', '\b', 
		'\x3', '\b', '\a', '\b', '\x88', '\n', '\b', '\f', '\b', '\xE', '\b', 
		'\x8B', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x6', '\t', '\x8F', '\n', 
		'\t', '\r', '\t', '\xE', '\t', '\x90', '\x3', '\t', '\x2', '\x2', '\n', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', '\x3', '\x4', 
		'\x2', '\x3', '\x3', '\xF', '\xF', '\x2', '\xA5', '\x2', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x17', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'X', '\x3', '\x2', '\x2', '\x2', '\b', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\n', '^', '\x3', '\x2', '\x2', '\x2', '\f', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 'x', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x14', '\x5', '\x4', '\x3', '\x2', '\x13', 
		'\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x1B', '\x5', '\b', '\x5', '\x2', '\x18', '\x1A', '\a', '\x10', '\x2', 
		'\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\"', '\a', 
		'\b', '\x2', '\x2', '\x1F', '!', '\a', '\x10', '\x2', '\x2', ' ', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '!', '$', '\x3', '\x2', '\x2', '\x2', '\"', 
		' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', '\x2', '\x2', 
		'#', '\x39', '\x3', '\x2', '\x2', '\x2', '$', '\"', '\x3', '\x2', '\x2', 
		'\x2', '%', '\x36', '\x5', '\x6', '\x4', '\x2', '&', '(', '\a', '\x10', 
		'\x2', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\x3', '\x2', '\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', 
		')', '\x3', '\x2', '\x2', '\x2', ',', '\x30', '\a', '\x3', '\x2', '\x2', 
		'-', '/', '\a', '\x10', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x32', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x35', '\x5', '\x6', '\x4', '\x2', '\x34', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x38', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', '\x2', '\x2', '\x37', 
		':', '\x3', '\x2', '\x2', '\x2', '\x38', '\x36', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '%', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '\xF', 
		'\x2', '\x2', '<', '\x5', '\x3', '\x2', '\x2', '\x2', '=', '\x41', '\a', 
		'\v', '\x2', '\x2', '>', '@', '\a', '\x10', '\x2', '\x2', '?', '>', '\x3', 
		'\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x44', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x46', '\a', '\x4', '\x2', '\x2', '\x45', 
		'G', '\x5', '\xE', '\b', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'H', 'Y', '\a', '\x5', '\x2', '\x2', 'I', 'J', '\a', '\n', '\x2', 
		'\x2', 'J', 'L', '\a', '\x6', '\x2', '\x2', 'K', 'M', '\x5', '\xE', '\b', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'Y', '\a', '\a', '\x2', 
		'\x2', 'O', 'Y', '\x5', '\f', '\a', '\x2', 'P', 'Y', '\x5', '\n', '\x6', 
		'\x2', 'Q', 'Y', '\a', '\t', '\x2', '\x2', 'R', 'T', '\x5', '\x10', '\t', 
		'\x2', 'S', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'S', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'Y', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x3', '\x2', '\x2', 
		'\x2', 'X', '=', '\x3', '\x2', '\x2', '\x2', 'X', 'I', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'O', '\x3', '\x2', '\x2', '\x2', 'X', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'Q', '\x3', '\x2', '\x2', '\x2', 'X', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'Z', ']', '\a', '\f', '\x2', '\x2', '[', ']', '\a', '\v', 
		'\x2', '\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', '[', '\x3', 
		'\x2', '\x2', '\x2', ']', '\t', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\a', '\r', '\x2', '\x2', '_', '\v', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x62', '\a', '\x10', '\x2', '\x2', '\x61', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x65', '\x3', '\x2', '\x2', '\x2', '\x63', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'j', '\a', '\x4', '\x2', '\x2', 'g', 'i', '\a', '\x10', 
		'\x2', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'o', '\x5', '\xE', '\b', '\x2', 'n', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 's', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'r', '\a', '\x10', '\x2', '\x2', 'q', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'r', 'u', '\x3', '\x2', '\x2', '\x2', 's', 'q', '\x3', '\x2', 
		'\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', '\x2', 't', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x5', 
		'\x2', '\x2', 'w', '\r', '\x3', '\x2', '\x2', '\x2', 'x', '\x89', '\x5', 
		'\x6', '\x4', '\x2', 'y', '{', '\a', '\x10', '\x2', '\x2', 'z', 'y', '\x3', 
		'\x2', '\x2', '\x2', '{', '~', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'\x83', '\a', '\x3', '\x2', '\x2', '\x80', '\x82', '\a', '\x10', '\x2', 
		'\x2', '\x81', '\x80', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x5', 
		'\x6', '\x4', '\x2', '\x87', '|', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', 
		'\x8F', '\n', '\x2', '\x2', '\x2', '\x8D', '\x8F', '\a', '\x11', '\x2', 
		'\x2', '\x8E', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x8D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x11', '\x3', '\x2', '\x2', '\x2', '\x18', '\x15', '\x1B', 
		'\"', ')', '\x30', '\x36', '\x39', '\x41', '\x46', 'L', 'U', 'X', '\\', 
		'\x63', 'j', 'n', 's', '|', '\x83', '\x89', '\x8E', '\x90',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
