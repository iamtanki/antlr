//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Transform.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TransformParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		LP=1, RP=2, WS=3, COMMA=4, MATRIX=5, TRANSLATE=6, ROTATE=7, SCALE=8, SKEWX=9, 
		SKEWY=10, SKEW=11, NUMBER=12, INT=13, LINE=14;
	public const int
		RULE_transform = 0, RULE_sentence = 1, RULE_funcname = 2, RULE_value = 3, 
		RULE_valueList = 4;
	public static readonly string[] ruleNames = {
		"transform", "sentence", "funcname", "value", "valueList"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", null, "','", "'matrix'", "'translate'", "'rotate'", 
		"'scale'", "'skewX'", "'skewY'", "'skew'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "LP", "RP", "WS", "COMMA", "MATRIX", "TRANSLATE", "ROTATE", "SCALE", 
		"SKEWX", "SKEWY", "SKEW", "NUMBER", "INT", "LINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Transform.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TransformParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TransformParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TransformParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TransformContext : ParserRuleContext {
		public SentenceContext[] sentence() {
			return GetRuleContexts<SentenceContext>();
		}
		public SentenceContext sentence(int i) {
			return GetRuleContext<SentenceContext>(i);
		}
		public ITerminalNode[] WS() { return GetTokens(TransformParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TransformParser.WS, i);
		}
		public TransformContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transform; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.EnterTransform(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.ExitTransform(this);
		}
	}

	[RuleVersion(0)]
	public TransformContext transform() {
		TransformContext _localctx = new TransformContext(Context, State);
		EnterRule(_localctx, 0, RULE_transform);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 13;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==WS) {
					{
					{
					State = 10; Match(WS);
					}
					}
					State = 15;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 16; sentence();
				State = 20;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 17; Match(WS);
						}
						} 
					}
					State = 22;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
				}
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WS) | (1L << MATRIX) | (1L << TRANSLATE) | (1L << ROTATE) | (1L << SCALE) | (1L << SKEWX) | (1L << SKEWY) | (1L << SKEW))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SentenceContext : ParserRuleContext {
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public ITerminalNode LP() { return GetToken(TransformParser.LP, 0); }
		public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		public ITerminalNode RP() { return GetToken(TransformParser.RP, 0); }
		public SentenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sentence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.EnterSentence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.ExitSentence(this);
		}
	}

	[RuleVersion(0)]
	public SentenceContext sentence() {
		SentenceContext _localctx = new SentenceContext(Context, State);
		EnterRule(_localctx, 2, RULE_sentence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27; funcname();
			State = 28; Match(LP);
			State = 29; valueList();
			State = 30; Match(RP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode TRANSLATE() { return GetToken(TransformParser.TRANSLATE, 0); }
		public ITerminalNode ROTATE() { return GetToken(TransformParser.ROTATE, 0); }
		public ITerminalNode MATRIX() { return GetToken(TransformParser.MATRIX, 0); }
		public ITerminalNode SKEWX() { return GetToken(TransformParser.SKEWX, 0); }
		public ITerminalNode SKEWY() { return GetToken(TransformParser.SKEWY, 0); }
		public ITerminalNode SKEW() { return GetToken(TransformParser.SKEW, 0); }
		public ITerminalNode SCALE() { return GetToken(TransformParser.SCALE, 0); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 4, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MATRIX) | (1L << TRANSLATE) | (1L << ROTATE) | (1L << SCALE) | (1L << SKEWX) | (1L << SKEWY) | (1L << SKEW))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(TransformParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_value);
		try {
			State = 36;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34; Match(NUMBER);
				}
				break;
			case RP:
			case WS:
			case COMMA:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TransformParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TransformParser.COMMA, i);
		}
		public ITerminalNode[] WS() { return GetTokens(TransformParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(TransformParser.WS, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITransformListener typedListener = listener as ITransformListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 8, RULE_valueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; value();
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==WS || _la==COMMA) {
				{
				{
				State = 58;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					{
					State = 42;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==WS) {
						{
						{
						State = 39; Match(WS);
						}
						}
						State = 44;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 45; Match(COMMA);
					State = 49;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 46; Match(WS);
							}
							} 
						}
						State = 51;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
					}
					}
					}
					break;
				case 2:
					{
					State = 53;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 52; Match(WS);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 55;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				case 3:
					{
					State = 57; Match(COMMA);
					}
					break;
				}
				State = 60; value();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x10', '\x45', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x15', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x18', '\v', 
		'\x2', '\x6', '\x2', '\x1A', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1B', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\'', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', '+', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', '.', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x32', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x35', 
		'\v', '\x6', '\x3', '\x6', '\x6', '\x6', '\x38', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\x39', '\x3', '\x6', '\x5', '\x6', '=', '\n', '\x6', '\x3', 
		'\x6', '\a', '\x6', '@', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x43', 
		'\v', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', '\x6', '\b', 
		'\n', '\x2', '\x3', '\x3', '\x2', '\a', '\r', '\x2', 'I', '\x2', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\"', '\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', '\x2', 
		'\x2', '\n', '(', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\a', '\x5', 
		'\x2', '\x2', '\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x10', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x16', '\x5', '\x4', 
		'\x3', '\x2', '\x13', '\x15', '\a', '\x5', '\x2', '\x2', '\x14', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x15', '\x18', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x18', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\x5', '\x6', '\x4', '\x2', 
		'\x1E', '\x1F', '\a', '\x3', '\x2', '\x2', '\x1F', ' ', '\x5', '\n', '\x6', 
		'\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\t', '\x2', '\x2', '\x2', '#', '\a', '\x3', 
		'\x2', '\x2', '\x2', '$', '\'', '\a', '\xE', '\x2', '\x2', '%', '\'', 
		'\x3', '\x2', '\x2', '\x2', '&', '$', '\x3', '\x2', '\x2', '\x2', '&', 
		'%', '\x3', '\x2', '\x2', '\x2', '\'', '\t', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x41', '\x5', '\b', '\x5', '\x2', ')', '+', '\a', '\x5', '\x2', 
		'\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', '\x2', '\x2', 
		'\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', 
		'\x2', '-', '/', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x33', '\a', '\x6', '\x2', '\x2', '\x30', '\x32', '\a', '\x5', 
		'\x2', '\x2', '\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x33', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', 
		'\a', '\x5', '\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', 
		'\x2', '\x2', '\x2', ';', '=', '\a', '\x6', '\x2', '\x2', '<', ',', '\x3', 
		'\x2', '\x2', '\x2', '<', '\x37', '\x3', '\x2', '\x2', '\x2', '<', ';', 
		'\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', '>', 
		'@', '\x5', '\b', '\x5', '\x2', '?', '<', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', '\v', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\v', 
		'\xF', '\x16', '\x1B', '&', ',', '\x33', '\x39', '<', '\x41',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
